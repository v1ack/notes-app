{"version":3,"sources":["features/notesSlice.js","components/note/tick.svg","components/note/circle.svg","components/note.js","components/list.js","components/leftside.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["notesSlice","createSlice","name","initialState","notes","id","text","complete","visible","reducers","add","state","action","payload","del","note","find","i","actions","selectNotes","Note","props","dispatch","useDispatch","className","onClick","src","tick","circle","alt","NotesList","useSelector","transitions","useTransition","filter","item","from","opacity","transform","enter","leave","config","duration","map","key","div","style","AddNote","type","onKeyDown","e","target","value","placeholder","NotesContainer","leftside","func","LeftSideItem","active","click","LeftSide","useState","setActive","ls","index","clicked","setFilter","App","configureStore","reducer","notesReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a8aa2a7.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\"\n\nexport const notesSlice = createSlice({\n    name: \"notes\",\n    initialState: {\n        notes: [{\n            id: 1,\n            text: \"Привет мир! 😘\",\n            complete: false,\n            visible: true,\n        }, {\n            id: 2,\n            text: \"Приветики\",\n            complete: false,\n            visible: true,\n        }, {\n            id: 3,\n            text: \"Сделанная задача\",\n            complete: true,\n            visible: false,\n        }],\n        id: 4,\n\n    },\n    reducers: {\n        add: (state, action) => {\n            state.notes = [...state.notes, {\n                id: state.id++,\n                text: action.payload,\n                complete: false,\n                visible: true,\n            }]\n        },\n        del: (state, action) => {\n            let note = state.notes.find(i => i.id === action.payload)\n            note.complete = !note.complete\n        },\n    },\n})\n\nexport const {add, del} = notesSlice.actions\n\nexport const selectNotes = state => state.notes.notes\nexport default notesSlice.reducer\n","export default __webpack_public_path__ + \"static/media/tick.ace110fd.svg\";","export default __webpack_public_path__ + \"static/media/circle.a503d14d.svg\";","import React from \"react\"\nimport {useDispatch} from \"react-redux\"\nimport {\n    del,\n} from \"../features/notesSlice\"\nimport tick from \"./note/tick.svg\"\nimport circle from \"./note/circle.svg\"\n\nexport function Note(props) {\n    const dispatch = useDispatch()\n\n    return <div className=\"Note clickable\">\n        <img onClick={() => dispatch(del(props.id))}\n             src={props.complete ? tick : circle} alt=\"icon\"/>\n        <span className={\n            (props.complete ? \"complete\" : \"\")\n        }>{props.text}</span>\n    </div>\n}\n","import {Note} from \"./note\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {add, selectNotes} from \"../features/notesSlice\"\nimport circle from \"./note/circle.svg\"\nimport {useTransition, animated} from \"react-spring\"\n\nexport function NotesList(props) {\n    const notes = useSelector(selectNotes)\n\n    const transitions = useTransition(notes.filter(props.filter), item => item.id, {\n        from: {opacity: 0, transform: \"scale(0)\"},\n        enter: {opacity: 1, transform: \"scale(1)\"},\n        leave: {opacity: 0, transform: \"scale(0)\"},\n        config: {\n            duration: 250,\n        },\n    })\n\n    return <div className=\"NotesList\">\n        {transitions.map(({item, props, key}) =>\n            <animated.div key={key} style={props}><Note {...item}/></animated.div>,\n        )}\n    </div>\n}\n\nexport function AddNote() {\n    const dispatch = useDispatch()\n\n    function handleEnter(e) {\n        if (e.key !== \"Enter\")\n            return\n        dispatch(add(e.target.value))\n        e.target.value = \"\"\n    }\n\n    return <div className=\"add-note\">\n        <img src={circle} alt=\"icon\"/>\n        <input type=\"text\" onKeyDown={handleEnter} placeholder=\"Добавить задачу\"/>\n    </div>\n}\n\nexport function NotesContainer(props) {\n    return <div className=\"container NotesContainer\">\n        <NotesList filter={props.filter}/>\n        <AddNote/>\n    </div>\n}\n","import React, {useState} from \"react\"\n\nconst leftside = [\n    {\n        name: \"Предстоящие\", func: () => (note) => !note.complete,\n    },\n    {\n        name: \"Все задачи\", func: () => () => true,\n    },\n    {\n        name: \"Завершенные\", func: () => (note) => note.complete,\n    },\n]\n\nfunction LeftSideItem(props) {\n    return <div className={\n        \"LeftSideItem \" +\n        \"clickable \" +\n        (props.active ? \"active\" : \"\")\n    } onClick={props.click}>{props.name}</div>\n}\n\nexport function LeftSide(props) {\n    const [active, setActive] = useState(1)\n\n    function click(index) {\n        setActive(index)\n        let clicked = leftside[index]\n        props.setFilter(clicked.func)\n    }\n\n    return <aside className=\"container\">\n        <header className=\"app-header\">✔ ToDo</header>\n        {leftside.map((ls, index) =>\n            <LeftSideItem {...ls} active={active === index} click={() => click(index)} key={ls.name}/>)}\n    </aside>\n}\n","import React, {useState} from \"react\"\nimport \"./App.css\"\nimport {NotesContainer} from \"./components/list\"\nimport {LeftSide} from \"./components/leftside\"\n\nfunction App() {\n    const [filter, setFilter] = useState(() => () => true)\n    return <main className=\"App\">\n        <LeftSide setFilter={setFilter}/>\n        <NotesContainer filter={filter}/>\n    </main>\n}\n\nexport default App\n","import {configureStore} from \"@reduxjs/toolkit\"\nimport notesReducer from \"../features/notesSlice\"\n\nexport default configureStore({\n    reducer: {\n        notes: notesReducer,\n    },\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\",\n            )\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport store from \"./app/store\"\nimport {Provider} from \"react-redux\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}